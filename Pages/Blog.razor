@page "/blog"
@using Monydragon_Portfolios.Models
@using Monydragons_Portfolio.Services.Content.Interface
@inject IBlogService BlogService
@inject IContentService BlogContentService
@inject IFilteringSortingService FilteringSortingService

<div class="header-container">
    <div class="sticky-header">
        <h1>Mony Dragon's Development Blog</h1>
    </div>
    <div class="search-area">
        @if (showSearch)
        {
            <input type="text" @bind="searchTerm" @oninput="OnSearchTermChanged" placeholder="Search posts..." />
            <button @onclick="ToggleSortingOrder">@($"{(sortingOrder ? "Descending" : "Ascending")}")</button>
        }
        <button @onclick="ToggleSearch" class="search-toggle"><i class="fa fa-search"></i></button>
    </div>
</div>


<div class="blog-container">
@if (blogPosts == null)
{
    <p>Loading...</p>
}
else
{
    @foreach (var post in filteredPosts)
    {
        <div class="blog-post">
            <h2>@BlogContentService.Linkify(BlogContentService.GetTitleWithoutDate(post.Title))</h2>
            <p><em>@post.Date.ToString("yyyy-MM-dd")</em></p>
            @foreach (var content in post.ContentFiles)
            {
                <pre>@BlogContentService.ProcessContent(content)</pre>

            }
            @foreach (var imageFile in post.ImageFiles)
            {
                <img src="@imageFile" alt="Blog Image" />
            }
        </div>
    }
}
</div>

@code {
    private IEnumerable<BlogPost> blogPosts = null;
    private IEnumerable<BlogPost> filteredPosts = null;
    private bool sortingOrder = true; // true for Descending, false for Ascending
    private string searchTerm = "";
    private bool showSearch = false; // Controls the visibility of the search box

    protected override async Task OnInitializedAsync()
    {
        blogPosts = await BlogService.GetBlogPostsAsync();
        foreach (var post in blogPosts)
        {
            var contents = new List<string>();
            foreach (var contentFile in post.ContentFiles)
            {
                var content = await BlogService.GetContentFileAsync(contentFile); // Ensure this method is correctly fetching the content
                contents.Add(content);
            }

            post.ContentFiles = contents; // Set the loaded content
        }

        filteredPosts = blogPosts.OrderByDescending(post => post.Date).ToList();
    }
    
    private async Task OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value.ToString();
        await ApplyFilters();
    }
    
    private async Task ToggleSortingOrder()
    {
        sortingOrder = !sortingOrder;
        await ApplyFilters(); // Reapply filters with the new sort order
    }
    
    private void ToggleSearch()
    {
        showSearch = !showSearch;
        StateHasChanged(); // This line might be optional in Blazor Server, but just to ensure UI updates.
    }

    private async Task ApplyFilters()
    {
        filteredPosts = await FilteringSortingService.ApplyFiltersAsync(blogPosts, searchTerm);
        filteredPosts = await FilteringSortingService.SortPostsAsync(filteredPosts, sortingOrder);
        StateHasChanged();
    }
    
}